###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     22/Nov/2014  18:20:38 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\IAR_TEST\Sirius\Sirius V2.3\src\Sources\C\isr.c       #
#    Command line =  "D:\IAR_TEST\Sirius\Sirius V2.3\src\Sources\C\isr.c" -D  #
#                    IAR -D TWR_K60N512 -lCN "D:\IAR_TEST\Sirius\Sirius       #
#                    V2.3\bin\Ram\List\" -lB "D:\IAR_TEST\Sirius\Sirius       #
#                    V2.3\bin\Ram\List\" -o "D:\IAR_TEST\Sirius\Sirius        #
#                    V2.3\bin\Ram\Obj\" --no_cse --no_unroll --no_inline      #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.3\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "D:\IAR_TEST\Sirius\Sirius                     #
#                    V2.3\src\Sources\H\" -I "D:\IAR_TEST\Sirius\Sirius       #
#                    V2.3\src\Sources\H\Component_H\" -I                      #
#                    "D:\IAR_TEST\Sirius\Sirius V2.3\src\Sources\H\Frame_H\"  #
#                    -I "D:\IAR_TEST\Sirius\Sirius                            #
#                    V2.3\src\Sources\H\Function_H\" -I                       #
#                    "D:\IAR_TEST\Sirius\Sirius V2.3\src\Sources\H\SD_H\"     #
#                    -Ol --use_c++_inline                                     #
#    List file    =  D:\IAR_TEST\Sirius\Sirius V2.3\bin\Ram\List\isr.lst      #
#    Object file  =  D:\IAR_TEST\Sirius\Sirius V2.3\bin\Ram\Obj\isr.o         #
#                                                                             #
#                                                                             #
###############################################################################

D:\IAR_TEST\Sirius\Sirius V2.3\src\Sources\C\isr.c
      1          //-------------------------------------------------------------------------*
      2          // 文件名: isr.c                                                           *
      3          // 说  明: 中断处理例程                                                    *
      4          //---------------苏州大学飞思卡尔嵌入式系统实验室2011年--------------------*
      5          
      6          #include "includes.h"
      7          #include "common.h"
      8          #include "DMA.h"
      9          #include "ImageGet.h"
     10          
     11          
     12          //-------------------------------------------------------------------------*
     13          //函数名: uart3_isr                                                        *
     14          //功  能: 串口3数据接收中断例程                                            *
     15          //说  明: 无                                                               *
     16          //-------------------------------------------------------------------------*

   \                                 In section .text, align 4, keep-with-next
     17          void uart0_isr(void)
     18          {
   \                     uart0_isr:
   \   00000000   0xB580             PUSH     {R7,LR}
     19              uint8 ch;
     20              DisableInterrupts;		//关总中断
   \   00000002   0xB672             CPSID i         
     21              //接收一个字节数据并回发
     22          	if(uart_re1 (UART0,&ch))
   \   00000004   0xA900             ADD      R1,SP,#+0
   \   00000006   0x....             LDR.N    R0,??DataTable7  ;; 0x4006a000
   \   00000008   0x.... 0x....      BL       uart_re1
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD004             BEQ.N    ??uart0_isr_0
     23          		uart_send1(UART0,ch);
   \   00000010   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000014   0x....             LDR.N    R0,??DataTable7  ;; 0x4006a000
   \   00000016   0x.... 0x....      BL       uart_send1
     24          	EnableInterrupts;		//开总中断
   \                     ??uart0_isr_0:
   \   0000001A   0xB662             CPSIE i         
     25          }
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return
     26          
     27          //------------------------------------------------------------------------------
     28          //函数名：PIT0_Isr
     29          //功  能：周期中断定时器PIT中断服务函数
     30          //参  数：无
     31          //返  回：无
     32          //说  明：
     33          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     34          void PIT0_Isr(void)
     35          {
   \                     PIT0_Isr:
   \   00000000   0xB580             PUSH     {R7,LR}
     36              if((PIT_TFLG(0)&PIT_TFLG_TIF_MASK)!=0)
   \   00000002   0x....             LDR.N    R0,??DataTable7_1  ;; 0x4003710c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x07C0             LSLS     R0,R0,#+31
   \   00000008   0xD505             BPL.N    ??PIT0_Isr_0
     37              {
     38                PIT_TFLG(0) |= PIT_TFLG_TIF_MASK;  //清中断标志
   \   0000000A   0x....             LDR.N    R0,??DataTable7_1  ;; 0x4003710c
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000012   0x....             LDR.N    R1,??DataTable7_1  ;; 0x4003710c
   \   00000014   0x6008             STR      R0,[R1, #+0]
     39              }
     40              
     41              gpio_reverse(PORTA, 10);
   \                     ??PIT0_Isr_0:
   \   00000016   0x210A             MOVS     R1,#+10
   \   00000018   0x....             LDR.N    R0,??DataTable7_2  ;; 0x400ff000
   \   0000001A   0x.... 0x....      BL       gpio_reverse
     42          }
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
     43          
     44          //DMA0传输结束函数，由PCLK触发，B9
     45          //这些处理放在这里，而不是放在LineIsr的原因是LineIsr进入后要马上开始采数据，来不及

   \                                 In section .text, align 2, keep-with-next
     46          void DMA0_Isr(void)
     47          {
   \                     DMA0_Isr:
   \   00000000   0xB580             PUSH     {R7,LR}
     48              uint8 DMACHno = 0;
   \   00000002   0x2000             MOVS     R0,#+0
     49              DMA_INT |= (1 << DMACHno);    //清DMA0通道传输完成中断标志位
   \   00000004   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40008024
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0xFA12 0xF000      LSLS     R0,R2,R0
   \   0000000E   0x4308             ORRS     R0,R0,R1
   \   00000010   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40008024
   \   00000012   0x6008             STR      R0,[R1, #+0]
     50              LineCount++;              //采集行计数值加1
   \   00000014   0x....             LDR.N    R0,??DataTable7_4
   \   00000016   0x8800             LDRH     R0,[R0, #+0]
   \   00000018   0x1C40             ADDS     R0,R0,#+1
   \   0000001A   0x....             LDR.N    R1,??DataTable7_4
   \   0000001C   0x8008             STRH     R0,[R1, #+0]
     51              
     52              if(LineCount >= CameraHight)   //如果采集完成
   \   0000001E   0x....             LDR.N    R0,??DataTable7_4
   \   00000020   0x8800             LDRH     R0,[R0, #+0]
   \   00000022   0x2832             CMP      R0,#+50
   \   00000024   0xD30B             BCC.N    ??DMA0_Isr_0
     53              {
     54                  ImgStatus = ImgGetFinish;    //图像采集结束标志位
   \   00000026   0x....             LDR.N    R0,??DataTable7_5
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0x7001             STRB     R1,[R0, #+0]
     55                  disable_irq(FIELD_IRQ);   //场中断IRQ禁用，等待下一次ImgGet()函数再开启
   \   0000002C   0x205A             MOVS     R0,#+90
   \   0000002E   0x.... 0x....      BL       disable_irq
     56                  disable_irq(LINE_IRQ);    //行中断IRQ禁用
   \   00000032   0x2059             MOVS     R0,#+89
   \   00000034   0x.... 0x....      BL       disable_irq
     57                  disable_irq(DMA0_IRQ);    //DMA0的IRQ禁用
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x.... 0x....      BL       disable_irq
     58                    
     59              }   
     60              
     61          }
   \                     ??DMA0_Isr_0:
   \   0000003E   0xBD01             POP      {R0,PC}          ;; return
     62          
     63          
     64          //PORTA中断服务函数
     65          //这个的IRQ不会打开，正常情况不会进来。

   \                                 In section .text, align 2, keep-with-next
     66          void PORTA_Isr(void)  
     67          {
   \                     PORTA_Isr:
   \   00000000   0xB580             PUSH     {R7,LR}
     68              PORTA_ISFR = ~0;
   \   00000002   0x....             LDR.N    R0,??DataTable7_6  ;; 0x400490a0
   \   00000004   0xF05F 0x31FF      MOVS     R1,#-1
   \   00000008   0x6001             STR      R1,[R0, #+0]
     69              uart_sendN(UART0, (uint8 *)"\nError In PORTA_Isr()!", 22); //错误警告
   \   0000000A   0x2216             MOVS     R2,#+22
   \   0000000C   0x....             LDR.N    R1,??DataTable7_7
   \   0000000E   0x....             LDR.N    R0,??DataTable7  ;; 0x4006a000
   \   00000010   0x.... 0x....      BL       uart_sendN
     70          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
     71          
     72          
     73          //PORTB中断服务函数，含PCLK引发的DMA，B9
     74          //这个的IRQ不会打开，正常情况不会进来。

   \                                 In section .text, align 2, keep-with-next
     75          void PORTB_Isr(void)  
     76          {
   \                     PORTB_Isr:
   \   00000000   0xB580             PUSH     {R7,LR}
     77              PORTB_ISFR = ~0;
   \   00000002   0x....             LDR.N    R0,??DataTable7_8  ;; 0x4004a0a0
   \   00000004   0xF05F 0x31FF      MOVS     R1,#-1
   \   00000008   0x6001             STR      R1,[R0, #+0]
     78              uart_sendN(UART0, (uint8 *)"\nError In PORTB_Isr()!", 22);  //错误警告
   \   0000000A   0x2216             MOVS     R2,#+22
   \   0000000C   0x....             LDR.N    R1,??DataTable7_9
   \   0000000E   0x....             LDR.N    R0,??DataTable7  ;; 0x4006a000
   \   00000010   0x.... 0x....      BL       uart_sendN
     79          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
     80          
     81          
     82          //PORTC中断服务函数，含行中断，C8

   \                                 In section .text, align 2, keep-with-next
     83          void PORTC_Isr(void)  
     84          {
   \                     PORTC_Isr:
   \   00000000   0xB580             PUSH     {R7,LR}
     85              uint32 FlagTmp = PORTC_ISFR;  
   \   00000002   0x....             LDR.N    R0,??DataTable7_10  ;; 0x4004b0a0
   \   00000004   0x6800             LDR      R0,[R0, #+0]
     86              PORTC_ISFR =  ~0;             //清除PORTC的所有中断标志位
   \   00000006   0x....             LDR.N    R1,??DataTable7_10  ;; 0x4004b0a0
   \   00000008   0xF05F 0x32FF      MOVS     R2,#-1
   \   0000000C   0x600A             STR      R2,[R1, #+0]
     87              
     88              if(FlagTmp & (1 << PIN_LINE))   //如果确认是行中断的
   \   0000000E   0x05C0             LSLS     R0,R0,#+23
   \   00000010   0xD501             BPL.N    ??PORTC_Isr_0
     89              {
     90                  LineIsr();                    //进行中断处理函数
   \   00000012   0x.... 0x....      BL       LineIsr
     91              }  
     92          }
   \                     ??PORTC_Isr_0:
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
     93          
     94          
     95          
     96          //PORTD中断服务函数，含场中断，D1

   \                                 In section .text, align 2, keep-with-next
     97          void PORTD_Isr(void)  
     98          {
   \                     PORTD_Isr:
   \   00000000   0xB580             PUSH     {R7,LR}
     99              uint32 FlagTmp = PORTD_ISFR;  
   \   00000002   0x....             LDR.N    R0,??DataTable7_11  ;; 0x4004c0a0
   \   00000004   0x6800             LDR      R0,[R0, #+0]
    100              PORTD_ISFR =  ~0;             //清除PORTD的所有中断标志位
   \   00000006   0x....             LDR.N    R1,??DataTable7_11  ;; 0x4004c0a0
   \   00000008   0xF05F 0x32FF      MOVS     R2,#-1
   \   0000000C   0x600A             STR      R2,[R1, #+0]
    101              
    102              if(FlagTmp & (1 << PIN_FIELD))   //如果确认是场中断的
   \   0000000E   0x0780             LSLS     R0,R0,#+30
   \   00000010   0xD501             BPL.N    ??PORTD_Isr_0
    103              {
    104                  FieldIsr();                    //进场中断处理函数
   \   00000012   0x.... 0x....      BL       FieldIsr
    105              }
    106          
    107          }
   \                     ??PORTD_Isr_0:
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
    108          
    109          
    110          
    111          //PORTE中断服务函数
    112          //这个的IRQ不会打开，正常情况不会进来。

   \                                 In section .text, align 2, keep-with-next
    113          void PORTE_Isr(void)  
    114          {
   \                     PORTE_Isr:
   \   00000000   0xB580             PUSH     {R7,LR}
    115              PORTE_ISFR = ~0;
   \   00000002   0x....             LDR.N    R0,??DataTable7_12  ;; 0x4004d0a0
   \   00000004   0xF05F 0x31FF      MOVS     R1,#-1
   \   00000008   0x6001             STR      R1,[R0, #+0]
    116              uart_sendN(UART0, (uint8 *)"\nError In PORTE_Isr()!", 22);   //错误警告
   \   0000000A   0x2216             MOVS     R2,#+22
   \   0000000C   0x....             LDR.N    R1,??DataTable7_13
   \   0000000E   0x....             LDR.N    R0,??DataTable7  ;; 0x4006a000
   \   00000010   0x.... 0x....      BL       uart_sendN
    117          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x4006A000         DC32     0x4006a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x4003710C         DC32     0x4003710c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x40008024         DC32     0x40008024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     LineCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     ImgStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x400490A0         DC32     0x400490a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     `?<Constant "\\nError In PORTA_Isr()!">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x4004A0A0         DC32     0x4004a0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     `?<Constant "\\nError In PORTB_Isr()!">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x4004B0A0         DC32     0x4004b0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x4004C0A0         DC32     0x4004c0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x4004D0A0         DC32     0x4004d0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0x........         DC32     `?<Constant "\\nError In PORTE_Isr()!">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nError In PORTA_Isr()!">`:
   \   00000000   0x0A 0x45          DC8 "\012Error In PORTA_Isr()!"
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x49    
   \              0x6E 0x20    
   \              0x50 0x4F    
   \              0x52 0x54    
   \              0x41 0x5F    
   \              0x49 0x73    
   \              0x72 0x28    
   \              0x29 0x21    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nError In PORTB_Isr()!">`:
   \   00000000   0x0A 0x45          DC8 "\012Error In PORTB_Isr()!"
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x49    
   \              0x6E 0x20    
   \              0x50 0x4F    
   \              0x52 0x54    
   \              0x42 0x5F    
   \              0x49 0x73    
   \              0x72 0x28    
   \              0x29 0x21    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nError In PORTE_Isr()!">`:
   \   00000000   0x0A 0x45          DC8 "\012Error In PORTE_Isr()!"
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x49    
   \              0x6E 0x20    
   \              0x50 0x4F    
   \              0x52 0x54    
   \              0x45 0x5F    
   \              0x49 0x73    
   \              0x72 0x28    
   \              0x29 0x21    
   \              0x00         
   \   00000017   0x00               DC8 0
    118          
    119          
    120          
    121            
    122          
    123          /*
    124          void porta_isr(void)//场中断，A24，下降沿中断
    125          {
    126            
    127          	PORTA_PCR24 |= PORT_PCR_ISF_MASK;//清除中断标志
    128          	DMA0_Init();
    129          	enable_irq(0);//使能DMA通道0完成中断
    130          	row=0;//初始化行
    131          	imagerow=0;//初始化采集行
    132          	enable_irq (88);//使能B口中断 ，B10行中断
    133          
    134          }
    135          */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  DMA0_Isr
             8 -> disable_irq
        8  PIT0_Isr
             8 -> gpio_reverse
        8  PORTA_Isr
             8 -> uart_sendN
        8  PORTB_Isr
             8 -> uart_sendN
        8  PORTC_Isr
             8 -> LineIsr
        8  PORTD_Isr
             8 -> FieldIsr
        8  PORTE_Isr
             8 -> uart_sendN
        8  uart0_isr
             8 -> uart_re1
             8 -> uart_send1


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant "\nError In PORTA_Isr()!">
      24  ?<Constant "\nError In PORTB_Isr()!">
      24  ?<Constant "\nError In PORTE_Isr()!">
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      64  DMA0_Isr
      32  PIT0_Isr
      22  PORTA_Isr
      22  PORTB_Isr
      24  PORTC_Isr
      24  PORTD_Isr
      22  PORTE_Isr
      30  uart0_isr

 
  72 bytes in section .rodata
 296 bytes in section .text
 
 296 bytes of CODE  memory
  72 bytes of CONST memory

Errors: none
Warnings: none
