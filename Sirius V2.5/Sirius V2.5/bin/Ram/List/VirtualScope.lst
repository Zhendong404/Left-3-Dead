###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     18/Nov/2014  15:42:53 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\IAR_TEST\Sirius\Sirius V2.2 NoMotor OKServo           #
#                    OKControl No4\Sirius V2.2\src\Sources\C\Function_C\Virtu #
#                    alScope.c                                                #
#    Command line =  "D:\IAR_TEST\Sirius\Sirius V2.2 NoMotor OKServo          #
#                    OKControl No4\Sirius V2.2\src\Sources\C\Function_C\Virtu #
#                    alScope.c" -D IAR -D TWR_K60N512 -lCN                    #
#                    "D:\IAR_TEST\Sirius\Sirius V2.2 NoMotor OKServo          #
#                    OKControl No4\Sirius V2.2\bin\Ram\List\" -lB             #
#                    "D:\IAR_TEST\Sirius\Sirius V2.2 NoMotor OKServo          #
#                    OKControl No4\Sirius V2.2\bin\Ram\List\" -o              #
#                    "D:\IAR_TEST\Sirius\Sirius V2.2 NoMotor OKServo          #
#                    OKControl No4\Sirius V2.2\bin\Ram\Obj\" --no_cse         #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.3\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    "D:\IAR_TEST\Sirius\Sirius V2.2 NoMotor OKServo          #
#                    OKControl No4\Sirius V2.2\src\Sources\H\" -I             #
#                    "D:\IAR_TEST\Sirius\Sirius V2.2 NoMotor OKServo          #
#                    OKControl No4\Sirius V2.2\src\Sources\H\Component_H\"    #
#                    -I "D:\IAR_TEST\Sirius\Sirius V2.2 NoMotor OKServo       #
#                    OKControl No4\Sirius V2.2\src\Sources\H\Frame_H\" -I     #
#                    "D:\IAR_TEST\Sirius\Sirius V2.2 NoMotor OKServo          #
#                    OKControl No4\Sirius V2.2\src\Sources\H\Function_H\" -I  #
#                    "D:\IAR_TEST\Sirius\Sirius V2.2 NoMotor OKServo          #
#                    OKControl No4\Sirius V2.2\src\Sources\H\SD_H\" -Ol       #
#                    --use_c++_inline                                         #
#    List file    =  D:\IAR_TEST\Sirius\Sirius V2.2 NoMotor OKServo           #
#                    OKControl No4\Sirius V2.2\bin\Ram\List\VirtualScope.lst  #
#    Object file  =  D:\IAR_TEST\Sirius\Sirius V2.2 NoMotor OKServo           #
#                    OKControl No4\Sirius V2.2\bin\Ram\Obj\VirtualScope.o     #
#                                                                             #
#                                                                             #
###############################################################################

D:\IAR_TEST\Sirius\Sirius V2.2 NoMotor OKServo OKControl No4\Sirius V2.2\src\Sources\C\Function_C\VirtualScope.c
      1          /******************************************************************************/
      2          /*******************************************************************************
      3            文件名：虚拟示波器C文件VirtualScope.c
      4            功  能：给虚拟示波器发送数据
      5            日  期：2014.11.18
      6            作  者：
      7            备  注：
      8          *******************************************************************************/
      9          /******************************************************************************/
     10          
     11          #include "VirtualScope.h"
     12          

   \                                 In section .bss, align 4
     13          float VirtualOutData[4] = { 0 };
   \                     VirtualOutData:
   \   00000000                      DS8 16
     14          

   \                                 In section .text, align 2, keep-with-next
     15          unsigned short CRC_CHECK(unsigned char *Buf, unsigned char CRC_CNT)
     16          {
   \                     CRC_CHECK:
   \   00000000   0xB430             PUSH     {R4,R5}
     17              unsigned short CRC_Temp;
     18              unsigned char i,j;
     19              CRC_Temp = 0xffff;
   \   00000002   0xF64F 0x72FF      MOVW     R2,#+65535
     20          
     21              for (i=0;i<CRC_CNT; i++){      
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0xE000             B.N      ??CRC_CHECK_0
   \                     ??CRC_CHECK_1:
   \   0000000A   0x1C5B             ADDS     R3,R3,#+1
   \                     ??CRC_CHECK_0:
   \   0000000C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x428B             CMP      R3,R1
   \   00000012   0xD213             BCS.N    ??CRC_CHECK_2
     22                  CRC_Temp ^= Buf[i];
   \   00000014   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000016   0x5C1C             LDRB     R4,[R3, R0]
   \   00000018   0x4062             EORS     R2,R4,R2
     23                  for (j=0;j<8;j++) {
   \   0000001A   0x2400             MOVS     R4,#+0
   \   0000001C   0xE002             B.N      ??CRC_CHECK_3
     24                      if (CRC_Temp & 0x01)
     25                          CRC_Temp = (CRC_Temp >>1 ) ^ 0xa001;
     26                      else
     27                          CRC_Temp = CRC_Temp >> 1;
   \                     ??CRC_CHECK_4:
   \   0000001E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000020   0x0852             LSRS     R2,R2,#+1
   \                     ??CRC_CHECK_5:
   \   00000022   0x1C64             ADDS     R4,R4,#+1
   \                     ??CRC_CHECK_3:
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x2C08             CMP      R4,#+8
   \   00000028   0xD2EF             BCS.N    ??CRC_CHECK_1
   \   0000002A   0x07D5             LSLS     R5,R2,#+31
   \   0000002C   0xD5F7             BPL.N    ??CRC_CHECK_4
   \   0000002E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000030   0x0852             LSRS     R2,R2,#+1
   \   00000032   0xF482 0x4220      EOR      R2,R2,#0xA000
   \   00000036   0xF092 0x0201      EORS     R2,R2,#0x1
   \   0000003A   0xE7F2             B.N      ??CRC_CHECK_5
     28                  }
     29              }
     30              return(CRC_Temp);
   \                     ??CRC_CHECK_2:
   \   0000003C   0x0010             MOVS     R0,R2
   \   0000003E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000040   0xBC30             POP      {R4,R5}
   \   00000042   0x4770             BX       LR               ;; return
     31          }
     32          

   \                                 In section .text, align 2, keep-with-next
     33          void VirtualOutPut_Data(void)
     34          {
   \                     VirtualOutPut_Data:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
     35            int temp[4] = {0};
   \   00000004   0xA807             ADD      R0,SP,#+28
   \   00000006   0x2110             MOVS     R1,#+16
   \   00000008   0x.... 0x....      BL       __aeabi_memclr4
     36            unsigned int temp1[4] = {0};
   \   0000000C   0xA803             ADD      R0,SP,#+12
   \   0000000E   0x2110             MOVS     R1,#+16
   \   00000010   0x.... 0x....      BL       __aeabi_memclr4
     37            unsigned char databuf[10] = {0};
   \   00000014   0xA800             ADD      R0,SP,#+0
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x2300             MOVS     R3,#+0
   \   0000001C   0xC00E             STM      R0!,{R1-R3}
   \   0000001E   0x380C             SUBS     R0,R0,#+12
     38            unsigned char i;
     39            unsigned short CRC16 = 0;
   \   00000020   0x2000             MOVS     R0,#+0
     40            for(i=0;i<4;i++)
   \   00000022   0x2400             MOVS     R4,#+0
   \   00000024   0xE012             B.N      ??VirtualOutPut_Data_0
     41             {
     42              
     43              temp[i]  = (int)VirtualOutData[i];
   \                     ??VirtualOutPut_Data_1:
   \   00000026   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   0x....             LDR.N    R0,??DataTable0
   \   0000002A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000002E   0x.... 0x....      BL       __aeabi_f2iz
   \   00000032   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000034   0xA907             ADD      R1,SP,#+28
   \   00000036   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
     44              temp1[i] = (unsigned int)temp[i];
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0xA803             ADD      R0,SP,#+12
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0xA907             ADD      R1,SP,#+28
   \   00000042   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000046   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
     45              
     46             }
   \   0000004A   0x1C64             ADDS     R4,R4,#+1
   \                     ??VirtualOutPut_Data_0:
   \   0000004C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004E   0x2C04             CMP      R4,#+4
   \   00000050   0xD3E9             BCC.N    ??VirtualOutPut_Data_1
     47             
     48            for(i=0;i<4;i++) 
   \   00000052   0x2400             MOVS     R4,#+0
   \   00000054   0xE018             B.N      ??VirtualOutPut_Data_2
     49            {
     50              databuf[i*2]   = (unsigned char)(temp1[i]%256);
   \                     ??VirtualOutPut_Data_3:
   \   00000056   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000058   0xA803             ADD      R0,SP,#+12
   \   0000005A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000005E   0xF44F 0x7180      MOV      R1,#+256
   \   00000062   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000066   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   0000006A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006C   0xA800             ADD      R0,SP,#+0
   \   0000006E   0xF800 0x2014      STRB     R2,[R0, R4, LSL #+1]
     51              databuf[i*2+1] = (unsigned char)(temp1[i]/256);
   \   00000072   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000074   0xA803             ADD      R0,SP,#+12
   \   00000076   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000007A   0x0A00             LSRS     R0,R0,#+8
   \   0000007C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007E   0xA900             ADD      R1,SP,#+0
   \   00000080   0xEB11 0x0144      ADDS     R1,R1,R4, LSL #+1
   \   00000084   0x7048             STRB     R0,[R1, #+1]
     52            }
   \   00000086   0x1C64             ADDS     R4,R4,#+1
   \                     ??VirtualOutPut_Data_2:
   \   00000088   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000008A   0x2C04             CMP      R4,#+4
   \   0000008C   0xD3E3             BCC.N    ??VirtualOutPut_Data_3
     53            
     54            CRC16 = CRC_CHECK(databuf,8);
   \   0000008E   0x2108             MOVS     R1,#+8
   \   00000090   0xA800             ADD      R0,SP,#+0
   \   00000092   0x.... 0x....      BL       CRC_CHECK
     55            databuf[8] = CRC16%256;
   \   00000096   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000098   0xF44F 0x7180      MOV      R1,#+256
   \   0000009C   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   000000A0   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   000000A4   0xF88D 0x2008      STRB     R2,[SP, #+8]
     56            databuf[9] = CRC16/256;
   \   000000A8   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000AA   0xF44F 0x7180      MOV      R1,#+256
   \   000000AE   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000B2   0xF88D 0x0009      STRB     R0,[SP, #+9]
     57            
     58            for(i=0;i<10;i++)
   \   000000B6   0x2400             MOVS     R4,#+0
   \   000000B8   0xE006             B.N      ??VirtualOutPut_Data_4
     59            uart_send1(UART0,databuf[i]);
   \                     ??VirtualOutPut_Data_5:
   \   000000BA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000BC   0xA800             ADD      R0,SP,#+0
   \   000000BE   0x5C21             LDRB     R1,[R4, R0]
   \   000000C0   0x....             LDR.N    R0,??DataTable0_1  ;; 0x4006a000
   \   000000C2   0x.... 0x....      BL       uart_send1
   \   000000C6   0x1C64             ADDS     R4,R4,#+1
   \                     ??VirtualOutPut_Data_4:
   \   000000C8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000CA   0x2C0A             CMP      R4,#+10
   \   000000CC   0xD3F5             BCC.N    ??VirtualOutPut_Data_5
     60          }
   \   000000CE   0xB00C             ADD      SP,SP,#+48
   \   000000D0   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     VirtualOutData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x4006A000         DC32     0x4006a000

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     61          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  CRC_CHECK
       56  VirtualOutPut_Data
             56 -> CRC_CHECK
             56 -> __aeabi_f2iz
             56 -> __aeabi_memclr4
             56 -> uart_send1


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant {0}>
      16  ?<Constant {0}>_1
      12  ?<Constant {0}>_2
       4  ??DataTable0
       4  ??DataTable0_1
      68  CRC_CHECK
      16  VirtualOutData
     210  VirtualOutPut_Data

 
  16 bytes in section .bss
  44 bytes in section .rodata
 286 bytes in section .text
 
 286 bytes of CODE  memory
  44 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: none
