###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     09/Dec/2014  13:51:41 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\IAR_TEST\Sirius\Sirius V2.3.5                         #
#                    66ms\src\Sources\C\Function_C\ImageGet.c                 #
#    Command line =  "D:\IAR_TEST\Sirius\Sirius V2.3.5                        #
#                    66ms\src\Sources\C\Function_C\ImageGet.c" -D IAR -D      #
#                    TWR_K60N512 -lCN "D:\IAR_TEST\Sirius\Sirius V2.3.5       #
#                    66ms\bin\Ram\List\" -lB "D:\IAR_TEST\Sirius\Sirius       #
#                    V2.3.5  66ms\bin\Ram\List\" -o                           #
#                    "D:\IAR_TEST\Sirius\Sirius V2.3.5  66ms\bin\Ram\Obj\"    #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.3\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "D:\IAR_TEST\Sirius\Sirius V2.3.5              #
#                    66ms\src\Sources\H\" -I "D:\IAR_TEST\Sirius\Sirius       #
#                    V2.3.5  66ms\src\Sources\H\Component_H\" -I              #
#                    "D:\IAR_TEST\Sirius\Sirius V2.3.5                        #
#                    66ms\src\Sources\H\Frame_H\" -I                          #
#                    "D:\IAR_TEST\Sirius\Sirius V2.3.5                        #
#                    66ms\src\Sources\H\Function_H\" -I                       #
#                    "D:\IAR_TEST\Sirius\Sirius V2.3.5                        #
#                    66ms\src\Sources\H\SD_H\" -Ol --use_c++_inline           #
#    List file    =  D:\IAR_TEST\Sirius\Sirius V2.3.5                         #
#                    66ms\bin\Ram\List\ImageGet.lst                           #
#    Object file  =  D:\IAR_TEST\Sirius\Sirius V2.3.5                         #
#                    66ms\bin\Ram\Obj\ImageGet.o                              #
#                                                                             #
#                                                                             #
###############################################################################

D:\IAR_TEST\Sirius\Sirius V2.3.5  66ms\src\Sources\C\Function_C\ImageGet.c
      1          /******************************************************************************/
      2          /*******************************************************************************
      3            文件名：图像采集程序IamgeGet.c
      4            功  能：图像采集
      5            日  期：2014.10.09
      6            作  者：HJZ
      7            备  注：
      8          
      9          *******************************************************************************/
     10          /******************************************************************************/
     11          
     12          #include "ImageGet.h"
     13          

   \                                 In section .bss, align 2
     14          uint16 LineCount;          //当前采集的行的计数值
   \                     LineCount:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     15          uint16 LineRealCount;      //当前实际的行的计数值
   \                     LineRealCount:
   \   00000000                      DS8 2
     16          //uint8 LineCount_Index;
     17          /*
     18          uint8 const LineRealCountVal01[CameraHight] = //当前实际的行的初始值，隔3行取1行
     19          {
     20          3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,
     21          84,87,90,93,96,99,102,105,108,111,114,117,120,123,126,129,132,135,138,141,144,
     22          147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,
     23          204,207,210,213,216,219,222,225,228,231,234,237,238
     24          };
     25          uint8 const LineRealCountVal02[CameraHight] = //当前实际的行的初始值，连续取中间的80行，效果不如隔行取好
     26          {
     27          151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,
     28          171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,
     29          191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,
     30          211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230  
     31          };
     32          */
     33          

   \                                 In section .rodata, align 4
     34          uint8 const LineRealCountVal03[CameraHight] = 
   \                     LineRealCountVal03:
   \   00000000   0x0F 0x12          DC8 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63
   \              0x15 0x18    
   \              0x1B 0x1E    
   \              0x21 0x24    
   \              0x27 0x2A    
   \              0x2D 0x30    
   \              0x33 0x36    
   \              0x39 0x3C    
   \              0x3F         
   \   00000011   0x42 0x45          DC8 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99, 102, 105, 108, 111
   \              0x48 0x4B    
   \              0x4E 0x51    
   \              0x54 0x57    
   \              0x5A 0x5D    
   \              0x60 0x63    
   \              0x66 0x69    
   \              0x6C 0x6F    
   \   00000021   0x72 0x75          DC8 114, 117, 120, 123, 126, 129, 132, 135, 138, 141, 144, 147, 150
   \              0x78 0x7B    
   \              0x7E 0x81    
   \              0x84 0x87    
   \              0x8A 0x8D    
   \              0x90 0x93    
   \              0x96         
   \   0000002E   0x99 0x9C          DC8 153, 156, 159, 162, 0, 0
   \              0x9F 0xA2    
   \              0x00 0x00    
     35          {
     36          15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87,90,
     37          93,96,99,102,105,108,111,114,117,120,123,126,129,132,135,138,141,144,147,150,
     38          153,156,159,162
     39          };
     40          

   \                                 In section .rodata, align 4
     41          uint8 const LineRealCountVal120_01[CameraHight] = 
   \                     LineRealCountVal120_01:
   \   00000000   0x04 0x06          DC8 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38
   \              0x08 0x0A    
   \              0x0C 0x0E    
   \              0x10 0x12    
   \              0x14 0x16    
   \              0x18 0x1A    
   \              0x1C 0x1E    
   \              0x20 0x22    
   \              0x24 0x26    
   \   00000012   0x28 0x2A          DC8 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72
   \              0x2C 0x2E    
   \              0x30 0x32    
   \              0x34 0x36    
   \              0x38 0x3A    
   \              0x3C 0x3E    
   \              0x40 0x42    
   \              0x44 0x46    
   \              0x48         
   \   00000023   0x4A 0x4C          DC8 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 0, 0
   \              0x4E 0x50    
   \              0x52 0x54    
   \              0x56 0x58    
   \              0x5A 0x5C    
   \              0x5E 0x60    
   \              0x62 0x64    
   \              0x66 0x00    
   \              0x00         
     42          {
     43          4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
     44          58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102
     45          };
     46          
     47          
     48          
     49          
     50          //场中断服务函数,下降沿触发中断，暂定为PTD1

   \                                 In section .text, align 2, keep-with-next
     51          void FieldIsr(void)  
     52          {
   \                     FieldIsr:
   \   00000000   0xB580             PUSH     {R7,LR}
     53              if(ImgStatus == ImgGetStart)  //如果的确是在ImageGet()中置了开始位，则继续。
   \   00000002   0x....             LDR.N    R0,??DataTable2
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2804             CMP      R0,#+4
   \   00000008   0xD115             BNE.N    ??FieldIsr_0
     54              {
     55                //进来前已经清过标志位
     56                enable_irq(LINE_IRQ);         //使能行中断IRQ
   \   0000000A   0x2059             MOVS     R0,#+89
   \   0000000C   0x.... 0x....      BL       enable_irq
     57                enable_irq(DMA0_IRQ);         //使能DMA0的IRQ
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      BL       enable_irq
     58                
     59                LineCount = 0;               //采集行数初始值为1，后面的溢出判断就用">"而不是">="
   \   00000016   0x....             LDR.N    R0,??DataTable2_1
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x8001             STRH     R1,[R0, #+0]
     60                LineRealCount = 0;
   \   0000001C   0x....             LDR.N    R0,??DataTable2_2
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x8001             STRH     R1,[R0, #+0]
     61                //LineCount_Index = 0;
     62          
     63                DMA_BASE_PTR->TCD[0].DADDR = (uint32)ImgRaw[0];     //目的地址恢复为数组开头
   \   00000022   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40009010
   \   00000024   0x....             LDR.N    R1,??DataTable2_4
   \   00000026   0x6001             STR      R1,[R0, #+0]
     64          
     65                
     66                DMA_ERQ &= ~(1 << 0);      //DMA硬件禁用
   \   00000028   0x....             LDR.N    R0,??DataTable2_5  ;; 0x4000800c
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x0840             LSRS     R0,R0,#+1
   \   0000002E   0x0040             LSLS     R0,R0,#+1
   \   00000030   0x....             LDR.N    R1,??DataTable2_5  ;; 0x4000800c
   \   00000032   0x6008             STR      R0,[R1, #+0]
   \   00000034   0xE004             B.N      ??FieldIsr_1
     67              }
     68              else
     69              {
     70                  uart_sendN(UART0, (uint8 *)"\nError In FieldIsr()!", 21);  //错误警报
   \                     ??FieldIsr_0:
   \   00000036   0x2215             MOVS     R2,#+21
   \   00000038   0x....             LDR.N    R1,??DataTable2_6
   \   0000003A   0x....             LDR.N    R0,??DataTable2_7  ;; 0x4006a000
   \   0000003C   0x.... 0x....      BL       uart_sendN
     71              }
     72          }
   \                     ??FieldIsr_1:
   \   00000040   0xBD01             POP      {R0,PC}          ;; return
     73          
     74          
     75          
     76          //行中断服务函数,上升沿触发中断，暂定为PTC8

   \                                 In section .text, align 2, keep-with-next
     77          void LineIsr(void)
     78          {
     79              LineRealCount++;             //实际行计数
   \                     LineIsr:
   \   00000000   0x....             LDR.N    R0,??DataTable2_2
   \   00000002   0x8800             LDRH     R0,[R0, #+0]
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \   00000006   0x....             LDR.N    R1,??DataTable2_2
   \   00000008   0x8008             STRH     R0,[R1, #+0]
     80              if(LineRealCount == LineRealCountVal120_01[LineCount])  //如果是需要采集的行，就采集，不是的话就跳过
   \   0000000A   0x....             LDR.N    R0,??DataTable2_2
   \   0000000C   0x8800             LDRH     R0,[R0, #+0]
   \   0000000E   0x....             LDR.N    R1,??DataTable2_1
   \   00000010   0x8809             LDRH     R1,[R1, #+0]
   \   00000012   0x....             LDR.N    R2,??DataTable2_8
   \   00000014   0x5C89             LDRB     R1,[R1, R2]
   \   00000016   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000018   0x4288             CMP      R0,R1
   \   0000001A   0xD105             BNE.N    ??LineIsr_0
     81              {
     82                 //LineCount_Index++;
     83                  //DMA_INT |= (1<<0);        //清DMA传输完成标志位
     84                  DMA_ERQ |= (1 << 0);      //DMA硬件使能
   \   0000001C   0x....             LDR.N    R0,??DataTable2_5  ;; 0x4000800c
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000024   0x....             LDR.N    R1,??DataTable2_5  ;; 0x4000800c
   \   00000026   0x6008             STR      R0,[R1, #+0]
     85              }    
     86          }
   \                     ??LineIsr_0:
   \   00000028   0x4770             BX       LR               ;; return
     87          
     88          
     89          
     90          
     91          
     92          
     93          //图像获取函数

   \                                 In section .text, align 2, keep-with-next
     94          void ImageGet(void)
     95          {
   \                     ImageGet:
   \   00000000   0xB580             PUSH     {R7,LR}
     96              
     97              ImgStatus = ImgGetStart;        //图像采集标志位置为开始
   \   00000002   0x....             LDR.N    R0,??DataTable2
   \   00000004   0x2104             MOVS     R1,#+4
   \   00000006   0x7001             STRB     R1,[R0, #+0]
     98              enable_irq(FIELD_IRQ);         //开启图像采集
   \   00000008   0x205A             MOVS     R0,#+90
   \   0000000A   0x.... 0x....      BL       enable_irq
     99              
    100              while(ImgStatus != ImgGetFinish) ; //如果图像采集未结束，则一直等待。
   \                     ??ImageGet_0:
   \   0000000E   0x....             LDR.N    R0,??DataTable2
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x2801             CMP      R0,#+1
   \   00000014   0xD1FB             BNE.N    ??ImageGet_0
    101                  
    102          }
   \   00000016   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     ImgStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     LineCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     LineRealCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x40009010         DC32     0x40009010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     ImgRaw

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x4000800C         DC32     0x4000800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     `?<Constant "\\nError In FieldIsr()!">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x4006A000         DC32     0x4006a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x........         DC32     LineRealCountVal120_01

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nError In FieldIsr()!">`:
   \   00000000   0x0A 0x45          DC8 "\012Error In FieldIsr()!"
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x49    
   \              0x6E 0x20    
   \              0x46 0x69    
   \              0x65 0x6C    
   \              0x64 0x49    
   \              0x73 0x72    
   \              0x28 0x29    
   \              0x21 0x00    
   \   00000016   0x00 0x00          DC8 0, 0
    103          
    104          
    105          
    106          
    107          
    108          
    109          
    110          
    111          
    112          
    113          
    114          
    115          
    116          
    117          
    118          
    119          
    120          
    121          
    122          
    123          
    124          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  FieldIsr
             8 -> enable_irq
             8 -> uart_sendN
        8  ImageGet
             8 -> enable_irq
        0  LineIsr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant "\nError In FieldIsr()!">
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
      66  FieldIsr
      24  ImageGet
       2  LineCount
      42  LineIsr
       2  LineRealCount
      52  LineRealCountVal03
      52  LineRealCountVal120_01

 
   4 bytes in section .bss
 128 bytes in section .rodata
 168 bytes in section .text
 
 168 bytes of CODE  memory
 128 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
